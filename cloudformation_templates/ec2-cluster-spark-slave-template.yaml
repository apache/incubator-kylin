#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

AWSTemplateFormatVersion: 2010-09-09
Description: Create Other needed worker nodes for ec2 instances and deploy related services, hadoop/spark/zookeeper/hive/jdk/kylin4
Parameters:
  # Must passed Parameters
  SparkMasterNodeHost:
    Type: String
    Description: Must be created at pre-step
  InstanceProfileId:
    Type: String
    Description: Must be created at pre-step

  SubnetId:
    Type: String
  SecurityGroupId:
    Type: String
  EMREc2KeyName:
    Type: String

  AssociatedPublicIp:
    Type: String
    Description: whether to associated public ip for instances
    Default: false
    AllowedValues:
      - true
      - false

  WorkerNum:
    Type: String
    Description: mark woker number for spark worker

  #   Optional Parameters
  LocalCacheSoftAffinity:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  Ec2Mode:
    Type: String
    Default: test
    AllowedValues:
      - test
      - product
  WaitingTime:
    Type: Number
    Default: 600
    Description: Waiting time for start slave worker
  BucketFullPath:
    Type: String
  BucketPath:
    Type: String
    Description: Url without prefix s3:/
  ScriptFileName:
    Type: String
    Default: prepare-ec2-env-for-spark-slave.sh
  InstanceType:
    Description: EC2 instance type
    Type: String
    ConstraintDescription: Must be a valid EC2 instance type.
    Default: m5.2xlarge
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
  InstanceTypeForTest:
    Description: EC2 instance type
    Type: String
    ConstraintDescription: Must be a valid EC2 instance type.
    Default: m5.xlarge
    AllowedValues:
      - m5.xlarge
  Ec2VolumnTypeForSlaveNode:
    Type: String
    Default: gp2
    AllowedValues:
      - gp2
      - gp3
      - io1
      - io2
      - sc1
      - st1
      - standard
  Ec2VolumeSizeForSlaveNode:
    Type: Number
    Default: 400
    MinValue: 30
    MaxValue: 400
  Ec2VolumnTypeForSlaveNodeForTest:
    Type: String
    Default: gp2
    AllowedValues:
      - gp2
  Ec2VolumeSizeForSlaveNodeForTest:
    Type: Number
    Default: 30
    MinValue: 30
    MaxValue: 30


Mappings:
  AWSRegionArch2AMI:
    cn-north-1:
      HVMebs: ami-00ac27054b887ff5c
    cn-northwest-1:
      HVMebs: ami-0135cb179d33fbe3e
    us-east-1:
      HVMebs: ami-0c6b1d09930fac512
    us-east-2:
      HVMebs: ami-0ebbf2179e615c338
    us-west-2:
      HVMebs: ami-0cb72367e98845d43
    us-west-1:
      HVMebs: ami-015954d5e5548d13b
    eu-west-1:
      HVMebs: ami-030dbca661d402413
    ca-central-1:
      HVMebs: ami-08a9b721ecc5b0a53
    eu-west-2:
      HVMebs: ami-0009a33f033d8b7b6
    eu-central-1:
      HVMebs: ami-0ebe657bc328d4e82
    ap-southeast-1:
      HVMebs: ami-0b5a47f8865280111
    ap-northeast-2:
      HVMebs: ami-08ab3f7e72215fe91
    ap-northeast-1:
      HVMebs: ami-00d101850e971728d
    ap-southeast-2:
      HVMebs: ami-0fb7513bcdc525c3b
    ap-south-1:
      HVMebs: ami-00e782930f1c3dbc7
    sa-east-1:
      HVMebs: ami-058141e091292ecf0

Conditions:
  NotNullSubnetId:
    !Not [!Equals [!Ref SubnetId, ""]]
  NotNullEc2KeyName:
    !Not [!Equals [!Ref EMREc2KeyName, ""]]
  NotNullSparkMasterNodeHost: !Not [!Equals [!Ref SparkMasterNodeHost, ""]]
  IsProductMode: !Equals [!Ref Ec2Mode, "product"]
  ValidConfigurationForEc2: !And
    - !Condition NotNullSubnetId
    - !Condition NotNullEc2KeyName
    - !Condition NotNullSparkMasterNodeHost
  IsAssociatedPublicIp: !Equals [!Ref AssociatedPublicIp, "true"]

Resources:
  Ec2InstanceOfSlave:
    Type: AWS::EC2::Instance
    DeletionPolicy: Delete
    Condition: ValidConfigurationForEc2
    Description: Scale node WorkerNum
    Properties:
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - HVMebs
      Tags:
        - Key: Project
          Value: Kylin4
        - Key: Name
          Value: !Join
            - ''
            - - Slave Scale
              - !Ref WorkerNum
              - Node for kylin4
      InstanceType:
        !If
        - IsProductMode
        - !Ref InstanceType
        - !Ref InstanceTypeForTest
      IamInstanceProfile: !Ref InstanceProfileId
      NetworkInterfaces:
        - DeviceIndex: 0
          Description: Scale Slave Node NetworkInterfaces
          DeleteOnTermination: true
          AssociatePublicIpAddress: !Ref AssociatedPublicIp
          SubnetId: !Ref SubnetId
          GroupSet:
            - !Ref SecurityGroupId
      BlockDeviceMappings:
        - !If
          - IsProductMode
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref Ec2VolumeSizeForSlaveNode
              VolumeType: !Ref Ec2VolumnTypeForSlaveNode
              DeleteOnTermination: true
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: !Ref Ec2VolumeSizeForSlaveNodeForTest
              VolumeType: !Ref Ec2VolumnTypeForSlaveNodeForTest
              DeleteOnTermination: true
        - !If
          - IsProductMode
          - DeviceName: /dev/xvdb
            Ebs:
              VolumeSize: !Ref Ec2VolumeSizeForSlaveNode
              VolumeType: !Ref Ec2VolumnTypeForSlaveNode
              DeleteOnTermination: true
          - !Ref AWS::NoValue
      KeyName: !Ref EMREc2KeyName
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -xe
              cd /home/ec2-user
              aws s3 cp ${PrivateBucketFullPath}/scripts/${PrivateSlaveScriptFileName} . --region ${PrivateRegion}
              bash ${PrivateSlaveScriptFileName} --bucket-url ${PrivateBucketPath} --master-host ${PrivateMasterHost} --worker-number ${WorkerNum} --region ${PrivateRegion} --waiting-time ${PrivateWaitingTime} --mode ${WorkerMode} --local-soft ${PrivateLocalCacheSoftAffinity}
            - PrivateMasterHost: !Ref SparkMasterNodeHost
              WorkerNum: !Ref WorkerNum
              PrivateBucketFullPath: !Ref BucketFullPath
              PrivateSlaveScriptFileName: !Ref ScriptFileName
              PrivateBucketPath: !Ref BucketPath
              PrivateRegion: !Ref AWS::Region
              PrivateWaitingTime: !Ref WaitingTime
              WorkerMode: !Ref Ec2Mode
              PrivateLocalCacheSoftAffinity: !Ref LocalCacheSoftAffinity

Outputs:
  IdOfInstance:
    Description: the id of Slave Instance
    Value: !Ref Ec2InstanceOfSlave
  SlaveEc2InstancePrivateIp:
    Description: the Slave Instance Private IP
    Value: !GetAtt Ec2InstanceOfSlave.PrivateIp
  SlaveEc2InstancePublicIp:
    Description: the Slave Instance Public IP
    Value: !GetAtt Ec2InstanceOfSlave.PublicIp
    Condition: IsAssociatedPublicIp
